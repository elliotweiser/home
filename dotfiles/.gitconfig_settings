[alias]
	a = add
	b = branch
	c = commit
        ca = commit --amend
	co = checkout
        cob = checkout -b
        com = checkout master
        cp = cherry-pick
	d = diff
	f = fetch
	#shorthand for git gerrit
        g = "!g() { [ -z \"$1\" ] && git push origin HEAD:refs/for/$(git rev-parse --abbrev-ref HEAD) || git push origin HEAD:refs/for/$1; }; g"
        gca = gc --aggressive --prune=all
	l = log
	lr = ls-remote
	m = merge
        #no-ff merge pull request from GitHub via git
	mpr = "!f() { if [ -n \"$1\" ];then ref=\"$(git ls-remote | grep \"refs/pull/$1/head\" | awk '{print $2}')\";git fetch origin ${ref}; [ -n \"${ref}\" ] && git merge --no-ff FETCH_HEAD || ( echo 'Pull request not found.'; return 1 ) ; else  echo 'Missing pull request as argument.'; return 1;fi; }; f"
	r = remote
	rb = rebase
	rs = reset
	s = status
	sr = show-ref
        st = stash
	#shorthand for git tree
	t = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white). %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
	#longer custom commands
	files = "!f() { git diff --name-status $1^ $1; }; f"
	gerrit = "!g() { [ -z \"$1\" ] && git push origin HEAD:refs/for/$(git rev-parse --abbrev-ref HEAD) || git push origin HEAD:refs/for/$1; }; g"
	root = rev-parse --show-toplevel
	tree = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white). %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
	tree2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white). %an%C(reset)' --abbrev-commit
	tree3 = log --oneline --decorate --graph
	squash = "!s() { if [ ! -z \"$1\" ];then if [ ! \"$(git rev-parse --abbrev-ref HEAD)\" = \"$1\" ];then git rebase --interactive $(git merge-base HEAD $1) ;else echo \"HEAD can't rebase against itself.  You can't rebase against the branch you have checked out.\"; return 1; fi; else echo \"No argument supplied.  Pass in a branch that you want to interactively rebase against compared to your current HEAD.\"; return 1; fi } ; s"
[core]
	editor = vim
	excludesfile = ~/.gitignore_global
[push]
	default = current
[commit]
	gpgSign = true
